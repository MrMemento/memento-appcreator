package com.memento._applicationDocuments {	// required FLASH classes	import flash.display.MovieClip;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.display.BitmapData;	import flash.text.TextField;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Rectangle;	import flash.system.Capabilities;	// required AIR classes	import flash.filesystem.File;	import flash.desktop.DockIcon;	import flash.desktop.NativeApplication;	import flash.desktop.NotificationType;	import flash.desktop.SystemTrayIcon;	import flash.events.InvokeEvent;	import flash.events.NativeWindowDisplayStateEvent;	import flash.display.NativeMenu;	import flash.display.NativeMenuItem;	import flash.display.NativeWindow;	import flash.display.NativeWindowDisplayState;	import flash.display.NativeWindowResize;	import flash.display.Screen;	import flash.display.StageQuality;	// required CUSTOM classes	import com.memento.air.net.ConnectionMonitor;	import com.memento.air.display.Message;	import com.memento.flash.events.CustomEvent;	public class AirApplicationSkeleton extends MovieClip {		// VARIABLES		// invocation		public static const FILE_INVOCATION:String      = new String("FileInvocation");		public static const DIRECTORY_INVOCATION:String = new String("DirectoryInvocation");		// user presence		public static const USER_APPEARS:String    = new String("UserAppears");		public static const USER_DISAPPEARS:String = new String("UserDisappears");		// internet connection		public static const NETSTATUS_CONNECTED:String    = new String("InternetConnectionConnected");		public static const NETSTATUS_DISCONNECTED:String = new String("InternetConnectionDisconnected");		// internet connection		public static const RESTORED:String = new String("WindowRestored");		public static const HIDED:String    = new String("WindowHided");		// menu		public static const OS_SETTINGS:String  = new String("OSSettingsPressed");		public static const OS_HELP:String      = new String("OSHelpPressed");		public static const OS_ABOUT:String     = new String("OSAboutPressed");		// system		public static const OS:String = Capabilities.os.substr(0,3).toLowerCase();		private var _tooltipStr:String  = "tooltipText, applicationIcon";		private var _settingsStr:String = "settingsText";		private var _aboutStr:String    = "aboutText";		private var _helpStr:String     = "helpText";		private var _restoreStr:String  = "restoreText";		private var _exitStr:String     = "exitText";		// 80x80 is dock icon's size		// tray icon will be resized automatically		// can be set at program start		//		private var _appIcon:BitmapData = new BitmapData(80, 80, false, 0x000000);		private var _appId:String      = "";		private var _appVersion:String = "";		private var _appName:String    = "";		private var _webHost:String    = "";		private var _hidden:Boolean = false;		private var _screenBounds:Rectangle;		private var _registeredFileTypes:Array;		private var myMonitor:ConnectionMonitor;		// INSTANTIATION		public function AirApplicationSkeleton():void {			// application settings			//			NativeApplication.nativeApplication.autoExit      = false;			NativeApplication.nativeApplication.idleThreshold = 120;			NativeApplication.nativeApplication.addEventListener(InvokeEvent.INVOKE, onInvokeEvent);			NativeApplication.nativeApplication.addEventListener(Event.USER_IDLE,    onUserDisappear);			NativeApplication.nativeApplication.addEventListener(Event.USER_PRESENT, onUserAppear);			if (NativeApplication.supportsDockIcon) {				var dock:DockIcon = NativeApplication.nativeApplication.icon as DockIcon;				dock.bitmaps      = [_appIcon];				dock.menu         = createDockMenu();			}			// retrieving data from application descriptor			//			var appXml:XML   = NativeApplication.nativeApplication.applicationDescriptor;			var ns:Namespace = appXml.namespace();			_appId      = appXml.ns::id[0];			_appVersion = appXml.ns::version[0];			_appName    = appXml.ns::filename[0];			_registeredFileTypes = new Array();			var types:XMLList = appXml.ns::fileTypes;			for (var i:uint=0; i<types.ns::fileType.length(); i++) {				_registeredFileTypes.push(types.ns::fileType[i].ns::name);			}			// stage settings			//			this.stage.align                  = StageAlign.TOP_LEFT;			this.stage.scaleMode              = StageScaleMode.NO_SCALE;			this.stage.quality                = StageQuality.MEDIUM;			this.stage.showDefaultContextMenu = false;			_screenBounds = Screen.mainScreen.bounds;			super();			// window settings			//			//this.stage.nativeWindow.alwaysInFront = true;			this.stage.nativeWindow.x = (_screenBounds.width - this.stage.nativeWindow.width) / 2;			this.stage.nativeWindow.y = (_screenBounds.height - this.stage.nativeWindow.height) / 2.5;			this.stage.nativeWindow.activate();			this.stage.nativeWindow.orderToFront();			// to close other opened windows			// if closed from taskbar			//			this.stage.nativeWindow.addEventListener(Event.CLOSING, exit);			this.stage.nativeWindow.addEventListener(NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGING, displayStateChange);		}		// EVENT FORWARDERS		// INVOCATION FILE HANDLING		//		private function onInvokeEvent(invokeEvent:InvokeEvent):void {			// handling:			// - command line			// - dragged on icon			// - associated			// files or directorys, if they exist			//			if ( (invokeEvent.currentDirectory!=null) && (invokeEvent.arguments.length>0) ) {				var invokeFile:File = invokeEvent.currentDirectory.resolvePath(invokeEvent.arguments[0]);				if (invokeFile.exists) {					if (invokeFile.isDirectory) {						dispatchEvent(new CustomEvent(DIRECTORY_INVOCATION, invokeFile));					}					else {						dispatchEvent(new CustomEvent(FILE_INVOCATION, invokeFile));					}				}			}			// bring window to front			//			restoreWindow();		}		// USER PRESENCE		//		private function onUserAppear(event:Event):void {			dispatchEvent(new Event(USER_APPEARS));		}		private function onUserDisappear(event:Event):void {			dispatchEvent(new Event(USER_DISAPPEARS));		}		// INTERNET CONNECTION		//		private function netConnected(event:Event):void {			dispatchEvent(new Event(NETSTATUS_CONNECTED));		}		private function netDisconnected(event:Event):void {			dispatchEvent(new Event(NETSTATUS_DISCONNECTED));		}		// MENU		//		private function settings(event:Event):void {			dispatchEvent(new Event(OS_SETTINGS));		}		private function help(event:Event):void {			dispatchEvent(new Event(OS_HELP));		}		private function about(event:Event):void {			dispatchEvent(new Event(OS_ABOUT));		}		// OS MENU FUNCTIONS		//		private function displayStateChange(displayStateEvent:NativeWindowDisplayStateEvent):void {			if (displayStateEvent.afterDisplayState == NativeWindowDisplayState.MINIMIZED) {				// catch and replace actions from OS				//				displayStateEvent.preventDefault();				hideWindow();			}			else if (displayStateEvent.afterDisplayState == NativeWindowDisplayState.NORMAL) {				restoreWindow();			}		}		// APPLICATION FUNCTIONS		//		public function maximizeWindow(event:*=null):void {			var nW:NativeWindow = this.stage.nativeWindow;			if (nW.displayState == NativeWindowDisplayState.NORMAL) {				nW.maximize();			}			else if (nW.displayState == NativeWindowDisplayState.MAXIMIZED) {				restoreWindow();			}		}		public function hideWindow(event:*=null):void {			if (!_hidden) {				_hidden = true;				if (NativeApplication.supportsSystemTrayIcon) {					// create system tray or dock icon					//					var tray:SystemTrayIcon = NativeApplication.nativeApplication.icon as SystemTrayIcon;					tray.bitmaps = [_appIcon];					tray.tooltip = _tooltipStr;					tray.menu = createTrayMenu();					tray.addEventListener(MouseEvent.CLICK, restoreWindow);				}				// hide window				//				this.stage.nativeWindow.visible = false;				dispatchEvent(new Event(HIDED));			}		}		public function restoreWindow(event:*=null):void {			if (_hidden) {				_hidden = false;				if (NativeApplication.supportsSystemTrayIcon) {					// hide tray icon					//					var tray:SystemTrayIcon = NativeApplication.nativeApplication.icon as SystemTrayIcon;					tray.bitmaps = [];				}				// show window				//				this.stage.nativeWindow.visible = true;				this.stage.nativeWindow.activate();				this.stage.nativeWindow.orderToFront();				dispatchEvent(new Event(RESTORED));			}		}		public function moveWindow(event:*=null):void {			this.stage.nativeWindow.startMove();			// TODO: should be checking, not to leave screen bounds			// snapping		}		public function resizeWindow(event:*=null):void {			this.stage.nativeWindow.startResize(NativeWindowResize.BOTTOM_RIGHT);		}		public function exit(event:*=null):void {			// close whole environment, so no windows stay			//			NativeApplication.nativeApplication.exit();		}		// MENU CREATORS		private function createTrayMenu():NativeMenu {			var trayMenu:NativeMenu = new NativeMenu();			trayMenu.addItem(new NativeMenuItem(_settingsStr));			// separator			trayMenu.addItem(new NativeMenuItem("", true));			trayMenu.addItem(new NativeMenuItem(_aboutStr));			trayMenu.addItem(new NativeMenuItem(_helpStr));			// separator			trayMenu.addItem(new NativeMenuItem("", true));			trayMenu.addItem(new NativeMenuItem(_restoreStr));			trayMenu.addItem(new NativeMenuItem(_exitStr));			trayMenu.items[0].addEventListener(Event.SELECT, settings);			trayMenu.items[2].addEventListener(Event.SELECT, about);			trayMenu.items[3].addEventListener(Event.SELECT, help);			trayMenu.items[5].addEventListener(Event.SELECT, restoreWindow);			trayMenu.items[6].addEventListener(Event.SELECT, exit);			return(trayMenu);		}		private function createDockMenu():NativeMenu {			var dockMenu:NativeMenu = new NativeMenu();			dockMenu.addItem(new NativeMenuItem(_settingsStr));			// separator			dockMenu.addItem(new NativeMenuItem("", true));			dockMenu.addItem(new NativeMenuItem(_aboutStr));			dockMenu.addItem(new NativeMenuItem(_helpStr));			// separator will be added automatically with hide and restore options			dockMenu.items[0].addEventListener(Event.SELECT, settings);			dockMenu.items[2].addEventListener(Event.SELECT, about);			dockMenu.items[3].addEventListener(Event.SELECT, help);			return(dockMenu);		}		// NOTIFICATION		public function notify(notStr:String, type:String = "",  clickFunc:Function = null):void {			// animate window			//			switch (type) {				case Message.ANIM_SLIDE:					Message.slideMessage(notStr, clickFunc);					break;				case Message.ANIM_FADE:					Message.fadeMessage(notStr, clickFunc);					break;				default:					Message.slideMessage(notStr, clickFunc);					break;			}			// OS regarding			//			if (NativeApplication.supportsDockIcon) {								var dock:DockIcon = NativeApplication.nativeApplication.icon as DockIcon;				if (_hidden) {					// bounce dock icon critical					//					dock.bounce(NotificationType.CRITICAL);				}				else {					// bounce dock icon informational					//					dock.bounce(NotificationType.INFORMATIONAL);				}			}			else if (NativeApplication.supportsSystemTrayIcon) {				if (_hidden) {					// flash system tray icon					//				}				else {					// flash taskbar icon critical					//					this.stage.nativeWindow.notifyUser(NotificationType.CRITICAL);				}			}		}		// BINDING FILE TYPES		public function registerFileTypes(types:*):void {			if (typeof types == "string") {				_registeredFileTypes = types.split(",");			}			else if (typeof types == "object") {				_registeredFileTypes = types;			}			// check, if this is the default application,			// for registered filetypes			//			for each (var extension:String in _registeredFileTypes) {				if (!NativeApplication.nativeApplication.isSetAsDefaultApplication(extension)) {					// NOT WORKING IN BETA 3 RELEASE					//					NativeApplication.nativeApplication.setAsDefaultApplication(extension);					var str:String = ("registering " + extension + ", success: " + NativeApplication.nativeApplication.isSetAsDefaultApplication(extension).toString() +"\n");				}			}		}		// OUTER SETTINGS - internet monitoring		public function set applicationHost(host:String):void {			_webHost = host;			myMonitor = new ConnectionMonitor(_webHost);			myMonitor.addEventListener(ConnectionMonitor.CONNECTION_AVAILABLE,     netConnected);			myMonitor.addEventListener(ConnectionMonitor.CONNECTION_NOT_AVAILABLE, netDisconnected);		}		public function get applicationHost():String {			return(_webHost);		}		// OUTER SETTINGS - icon		public function set applicationIcon(bmd:BitmapData):void {			_appIcon = bmd;			if (NativeApplication.supportsSystemTrayIcon) {				if (_hidden) {					var tray:SystemTrayIcon = NativeApplication.nativeApplication.icon as SystemTrayIcon;					tray.bitmaps = [_appIcon];				}			}			else if (NativeApplication.supportsDockIcon) {				updateDock();			}		}		public function get applicationIcon():BitmapData {			return(_appIcon);		}		// OUTER SETTINGS - idle		public function set idleThreshold(th:uint):void {			NativeApplication.nativeApplication.idleThreshold = th;		}		public function get idleThreshold():uint {			return(NativeApplication.nativeApplication.idleThreshold);		}		// OUTER SETTINGS - texts		public function set tooltipText(str:String):void {			_tooltipStr = str;		}		public function get tooltipText():String {			return(_tooltipStr);		}		public function set settingsText(str:String):void {			_settingsStr = str;		}		public function get settingsText():String {			return(_settingsStr);		}		public function set aboutText(str:String):void {			_aboutStr = str;		}		public function get aboutText():String {			return(_aboutStr);		}		public function set helpText(str:String):void {			_helpStr = str;		}		public function get helpText():String {			return(_helpStr);		}		public function set restoreText(str:String):void {			_restoreStr = str;		}		public function get restoreText():String {			return(_restoreStr);		}		public function set exitText(str:String):void {			_exitStr = str;		}		public function get exitText():String {			return(_exitStr);		}		public function updateDock():void {			if (NativeApplication.supportsDockIcon) {				var dock:DockIcon = NativeApplication.nativeApplication.icon as DockIcon;				dock.bitmaps      = [_appIcon];				dock.menu         = createDockMenu();			}		}		// OUTER SETTINGS - application descriptor		public function get applicationId():String {			return(_appId);		}		public function get applicationVersion():String {			return(_appVersion);		}		public function get applicationName():String {			return(_appName);		}	}}