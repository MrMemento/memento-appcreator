package com.memento.air.display {	// required FLASH classes	import flash.events.Event;	import flash.events.MouseEvent;	import flash.display.Sprite;	import flash.display.MovieClip;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.TextFieldAutoSize;	import flash.text.AntiAliasType;	import flash.filters.DropShadowFilter;	import flash.system.Capabilities;	// required AIR classes	import flash.display.Screen;	import flash.display.NativeWindow;	import flash.display.NativeWindowInitOptions;	import flash.display.NativeWindowType;	import flash.display.NativeWindowSystemChrome;	public class Message extends NativeWindow {		// VARIABLES		public static const ANIM_SLIDE:String = new String("slide");		public static const ANIM_FADE:String  = new String("fade");		public static var BgrClass:Class      = null;		public static var stockWidth:uint     = 250;		public static var stockHeight:uint    = 70;		public static var stockAlpha:Number   = 0.9;		public static var gutterSize:uint     = 10;		public static var expirationTime:uint = 100;		public static var format:TextFormat   = new TextFormat("arial", 14, 0, true);		public var name:String;		private var _background:Sprite		private var _expiration:uint;		private var _gutter:uint;		private var _expCtr:uint;		private var _posY:Number;		private var _container:MovieClip;		private var _textDisplay:TextField;		/*		 * call through these static functions		 * -----------------------------------		 *		 * str:       text to display in message window		 * clickFunc: function to invoke when user clicks on message window		 * expire:    expiration time in frames		 * spacer:    the space in pixels from the right side of window and from top or bottom regarding to operating system		 *		 */		public static function slideMessage(str:String = "", clickFunc:Function = null, expire:uint = 0, spacer:uint = 0):void {			var screenW:uint       = Screen.mainScreen.bounds.width;			var screenH:uint       = Screen.mainScreen.bounds.height;			var visibleSreenH:uint = Screen.mainScreen.visibleBounds.height;			var visibleSreenY:uint = Screen.mainScreen.visibleBounds.y;			var myMsg:Message = new Message(str, clickFunc);				(expire != 0) ? (myMsg._expiration = expire) : (myMsg._expiration = expirationTime);			(spacer != 0) ? (myMsg._gutter = spacer) : (myMsg._gutter = gutterSize);			myMsg.x = screenW - (stockWidth + myMsg._gutter);			var OS:String = Capabilities.os.substr(0,3).toLowerCase();			var whereToY:int;			if (OS == "win") {				myMsg.y  = screenH;				whereToY = visibleSreenH - (stockHeight + myMsg._gutter);			}			else if (OS == "mac") {				myMsg.y  = - stockHeight;				whereToY = visibleSreenY + myMsg._gutter;			}			myMsg.slideAndExpire(whereToY);		}		public static function fadeMessage(str:String = "", clickFunc:Function = null, expire:uint = 0, spacer:uint = 0):void {			var screenW:uint  = Screen.mainScreen.bounds.width;			var screenH:uint  = Screen.mainScreen.bounds.height;			var visibleSreenH:uint = Screen.mainScreen.visibleBounds.height;			var visibleSreenY:uint = Screen.mainScreen.visibleBounds.y;			var myMsg:Message = new Message(str, clickFunc, true);			(expire != 0) ? (myMsg._expiration = expire) : (myMsg._expiration = expirationTime);			(spacer != 0) ? (myMsg._gutter = spacer) : (myMsg._gutter = gutterSize);			myMsg.x = screenW - (stockWidth + myMsg._gutter);			var OS:String = Capabilities.os.substr(0,3).toLowerCase();			if (OS == "win") {				myMsg.y = visibleSreenH - (stockHeight + myMsg._gutter);			}			else if (OS == "mac") {				myMsg.y = visibleSreenY + myMsg._gutter;			}			myMsg.fadeAndExpire();		}		// INSTANTIATION		public function Message(msg:String = "",  clickFunc:Function = null, fade:Boolean = false):void {			var options:NativeWindowInitOptions = new NativeWindowInitOptions();			options.type                        = NativeWindowType.LIGHTWEIGHT;			options.systemChrome                = NativeWindowSystemChrome.NONE;			options.transparent                 = true;			options.maximizable                 = false;			options.minimizable                 = false;			options.resizable                   = false;			super(options);			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align     = StageAlign.TOP_LEFT;			alwaysInFront = true;			width   = stockWidth;			height  = stockHeight;			visible = true;			createMsg(msg, fade);			stage.addEventListener(MouseEvent.CLICK, msgClose);			if (clickFunc != null) stage.addEventListener(MouseEvent.CLICK, clickFunc);		}		// CREATION		private function createMsg(msg:String = "", fade:Boolean = false):void {			_container = new MovieClip();			// graphics			//			if (BgrClass != null) {				// outer background				//				_background = new BgrClass(width-4, height-4) as Sprite;			}			else {				// default background				//				_background = new Sprite();										with (_background.graphics) {						lineStyle(1);					beginFill(0xddffdd, stockAlpha);					drawRoundRect(0, 0, width-4, height-4, 8, 8);					endFill();				}			}			_background.x = _background.y = 2;			_container.addChild(_background);			// text			//			_textDisplay               = new TextField();			_textDisplay.x             = 5;			_textDisplay.y             = 5;			//_textDisplay.antiAliasType = AntiAliasType.ADVANCED;			//_textDisplay.embedFonts    = true;			_textDisplay.width         = width  - 10;			_textDisplay.height        = height - 10;			_textDisplay.multiline     = true;			_textDisplay.wordWrap      = true;			_textDisplay.autoSize      = TextFieldAutoSize.LEFT;			_textDisplay.selectable    = false;			_textDisplay.text          = msg;			_textDisplay.setTextFormat(format);			_container.addChild(_textDisplay);			// for not embedded text to fade			//			_container.filters = [new DropShadowFilter(0,0,0,0,0,0,0,0,false,false,false)];			_container.mouseChildren = false;			if (fade) _container.alpha = 0;			stage.addChild(_container);		}		// ANIMATIONS AND CLOSING		public function slideAndExpire(endY:int):void {			_expCtr = 0;			_posY   = endY;			stage.addEventListener(Event.ENTER_FRAME, slideExpire);		}		public function fadeAndExpire():void {			_expCtr = 0;			stage.addEventListener(Event.ENTER_FRAME, fadeExpire);		}		public function msgClose(event:* = null):void {			// remove all possible animation functions			//			stage.removeEventListener(Event.ENTER_FRAME, slideExpire);			stage.removeEventListener(Event.ENTER_FRAME, fadeExpire);			stage.addEventListener(Event.ENTER_FRAME, fadeClose);		}		private function slideExpire(event:Event):void {			if (Math.abs(y - _posY)>_background.y) {				y -= (y - _posY) / 4;			}			else if (_expCtr < _expiration) {				_expCtr++;			}			else {				stage.removeEventListener(Event.ENTER_FRAME, slideExpire);				msgClose();			}		}		private function fadeExpire(event:Event):void {			if (_container.alpha < stockAlpha) {				_container.alpha += 0.1;			}			else if (_expCtr < _expiration) {				_expCtr++;			}			else {				stage.removeEventListener(Event.ENTER_FRAME, fadeExpire);				msgClose();			}		}		private function fadeClose(event:Event):void {			if (_container.alpha > 0) {				_container.alpha -= 0.1;			}			else {				stage.removeEventListener(Event.ENTER_FRAME, msgClose);				close();			}		}	}}