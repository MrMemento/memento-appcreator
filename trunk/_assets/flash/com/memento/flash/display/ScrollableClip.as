package com.memento.flash.display {	// required FLASH classes	import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.geom.Point;	import flash.geom.Rectangle;	import flash.utils.Timer;	public class ScrollableClip extends MovieClip {		//public static var scrEase:Number = 5;		public var debug:String;		private var _content:MovieClip;		public static var ScrollBgr:Class;		public static var ScrollArr:Class;		public static var ScrollBtn:Class;		public static var ScrollGpr:Class;		private var _addedToStage:Boolean = false;		private var _scrV:Boolean         = false;		private var _scrH:Boolean         = false;		private var _scaleV:Number;		private var _scaleH:Number;		private var _scrDifV:Number;		private var _scrDifH:Number;		private var _jumpGapV:Number;		private var _jumpGapH:Number;		private var __contentBounds:Rectangle;		// maybe we want to stop the timer,		// before it is instantiated		private var _scrTimer:Timer = new Timer(30);		private var _uArr:MovieClip;		private var _dArr:MovieClip;		private var _bgrV:MovieClip;		private var _btnV:MovieClip;		private var _vScroll:MovieClip;		private var _lArr:MovieClip;		private var _rArr:MovieClip;		private var _bgrH:MovieClip;		private var _btnH:MovieClip;		private var _hScroll:MovieClip;		public function ScrollableClip():void {			super();			_content = new MovieClip();			super.addChild(_content);			_content.visible = false;			addEventListener(Event.ADDED_TO_STAGE, addedToStage);			debug = "\nScrollableClip instantiated";		}		// add and resize scrollbar		// regarding to stage		//		private function addedToStage(event:Event):void {			_addedToStage = true;			setSkin();			_content.visible = true;			removeEventListener(Event.ADDED_TO_STAGE, addedToStage);		}		public function setSkin(contentX:Number=0, contentY:Number=0):void {			// clear everything except _content			//			while(super.numChildren>1) super.removeChild(super.getChildAt(super.numChildren-1));			if (this.mask != null) {				// scales regarding to stage				//				_scaleV = 1 / (this.localToGlobal(new Point(1,0)).x - this.localToGlobal(new Point(0,0)).x);				_scaleH = 1 / (this.localToGlobal(new Point(0,1)).y - this.localToGlobal(new Point(0,0)).y);				// position _content and container				// to mask's coordinates				//				this._content.x = contentX;				this._content.y = contentY;				debug = "startX: " + contentX.toString() + ", startY : " + contentY.toString();				this.x = this.mask.x;				this.y = this.mask.y;				// update bounds				//				__contentBounds = this._content.getBounds(this);				// check needed scrolls				// and whether we need them at all				//				var ref:MovieClip = new ScrollArr();				ref.scaleX        = _scaleV;				ref.scaleY        = _scaleH;				if (_scrV && !_scrH) {					if (	(_content.height > this.mask.height*_scaleH) &&							(this.mask.height*_scaleH > 3*ref.height)) {						initVerticalSroll();						debug += "\nVertical Scrollbar added";					}					else {						_scrV = false;						removeEventListener(MouseEvent.MOUSE_WHEEL, handleMouseWheel);						debug += "\nContent is not higher than mask, or not able to render vertical scrollbar\n";					}				}				else if (_scrH && !_scrV) {					if (	(_content.width > this.mask.width*_scaleV) &&							(this.mask.width*_scaleV > 3*ref.width)) {						initHorizontalSroll();						debug += "\nHorizontal Scrollbar added";					}					else {						_scrH = false;						debug += "\nContent is not wider than mask, or not able to render horizontal scrollbar\n";					}					removeEventListener(MouseEvent.MOUSE_WHEEL, handleMouseWheel);				}				else if (_scrV && _scrH) {					if (	(_content.height > this.mask.height*_scaleH) &&							(this.mask.height*_scaleH > 3*ref.height)) {						debug += "\nVertical Scrollbar added";					}					else {						_scrV = false;						removeEventListener(MouseEvent.MOUSE_WHEEL, handleMouseWheel);						debug += "\nContent is not higher than mask, or not able to render vertical scrollbar\n";					}					if (	(_content.width > this.mask.width*_scaleV) &&							(this.mask.width*_scaleV > 3*ref.width)) {						debug += "\nHorizontal Scrollbar added";					}					else {						_scrH = false;						debug += "\nContent is not wider than mask, or not able to render horizontal scrollbar\n";					}					if (_scrV && _scrH) {						initVerticalSroll(true);						initHorizontalSroll(true);					}					else if (_scrV) {						initVerticalSroll();					}					else if (_scrH) {						initHorizontalSroll(true);					}				}			}			else {				_scrH = _scrV = false;				debug += "\nERROR:\n[ No mask available ]\n";			}		}		// display scrollbars		//		private function initVerticalSroll(bothScroll:Boolean = false):void {			_uArr            = new ScrollArr();			_uArr.scaleX     = _scaleV;			_uArr.scaleY     = _scaleH;			_uArr.addEventListener(MouseEvent.MOUSE_DOWN, scrollUp);			_dArr            = new ScrollArr();			_dArr.scaleX     = _scaleV;			_dArr.scaleY     = -_scaleH;			_dArr.y          = this.mask.height*_scaleH - (bothScroll ? _dArr.height : 0);			_dArr.addEventListener(MouseEvent.MOUSE_DOWN, scrollDown);			_bgrV            = new ScrollBgr();			_bgrV.scaleX     = _scaleV;			_bgrV.height     = this.mask.height*_scaleH - (bothScroll ? (3*_uArr.height) : (2*_uArr.height));			_bgrV.y          = _uArr.height;			_btnV            = new ScrollBtn();			_btnV.scaleX     = _scaleV;			_btnV.height     = this.mask.height*_scaleH * _bgrV.height / __contentBounds.height;			var thePlace:Number = _bgrV.height*(-_content.y)/_content.height;			_btnV.y             = _uArr.height + ( (thePlace>0) ? (thePlace) : (0) );			_btnV.addEventListener(MouseEvent.MOUSE_DOWN, scrollDragV);			_vScroll   = new MovieClip();			_vScroll.x = this.mask.width*_scaleV - _uArr.width;			_vScroll.addChild(_bgrV);			_vScroll.addChild(_uArr);			_vScroll.addChild(_dArr);			_vScroll.addChild(_btnV);			_scrDifV  = __contentBounds.height - this.mask.height*_scaleH;			_jumpGapV = _btnV.height / 10;			super.addChild(_vScroll);			removeEventListener(MouseEvent.MOUSE_WHEEL, handleMouseWheel);			addEventListener(MouseEvent.MOUSE_WHEEL,    handleMouseWheel);		}		private function initHorizontalSroll(bothScroll:Boolean = false):void {			_lArr            = new ScrollArr();			_lArr.rotation   = -90;			_lArr.scaleX     = _scaleV;			_lArr.scaleY     = _scaleH;			_lArr.y          = _lArr.height;			_lArr.addEventListener(MouseEvent.MOUSE_DOWN, scrollLeft);			_rArr            = new ScrollArr();			_rArr.rotation   = 90;			_rArr.scaleX     = _scaleV;			_rArr.scaleY     = _scaleH;			_rArr.x          = this.mask.width*_scaleV - (bothScroll ? _rArr.width : 0);			_rArr.addEventListener(MouseEvent.MOUSE_DOWN, scrollRight);			_bgrH            = new ScrollBgr();			_bgrH.scaleX     = _scaleH;			_bgrH.x          = _lArr.width;			_bgrH.y          = _bgrH.width;			_bgrH.height     = this.mask.width*_scaleH - (bothScroll ? (3*_lArr.width) : (2*_lArr.width));			_bgrH.rotation   = -90;			_btnH            = new ScrollBtn();			_btnH.scaleY     = _scaleH;			_btnH.height      = this.mask.width*_scaleH * _bgrH.width / __contentBounds.width;			_btnH.rotation   = -90;			var thePlace:Number = _bgrH.width*(-_content.x)/_content.width;			_btnH.x             = _lArr.width + ( (thePlace>0) ? (thePlace) : (0) );			_btnH.y             = _btnH.height;			_btnH.addEventListener(MouseEvent.MOUSE_DOWN, scrollDragH);			_hScroll   = new MovieClip();			_hScroll.y = this.mask.height*_scaleV - _lArr.height;			_hScroll.addChild(_bgrH);			_hScroll.addChild(_lArr);			_hScroll.addChild(_rArr);			_hScroll.addChild(_btnH);			_scrDifH  = __contentBounds.width - this.mask.width*_scaleV;			_jumpGapH = _btnH.width / 10;			super.addChild(_hScroll);		}		// mouse wheel for vertical scrollbar		//		private function handleMouseWheel(event:MouseEvent):void {			event.delta > 0 ? doUp() : doDown();		}		// scroll movers		//		private function scrollUp(event:Event):void {			stage.addEventListener(MouseEvent.MOUSE_UP, stopUp);			stage.addEventListener(Event.MOUSE_LEAVE,   stopUp);			doUp();			_scrTimer = new Timer(100);			_scrTimer.addEventListener(TimerEvent.TIMER, doUp);			_scrTimer.start();		}		private function doUp(event:* = null):void {			if (_btnV.y > _uArr.height + _jumpGapV) {				_btnV.y -= _jumpGapV;			}			else {				_btnV.y = _uArr.height;				_scrTimer.stop();			}			placeContentY();		}		private function stopUp(event:* = null):void {			_scrTimer.stop();			placeContentY();			stage.removeEventListener(MouseEvent.MOUSE_UP, stopUp);			stage.removeEventListener(Event.MOUSE_LEAVE,   stopUp);		}		private function scrollDown(event:Event):void {			stage.addEventListener(MouseEvent.MOUSE_UP, stopDown);			stage.addEventListener(Event.MOUSE_LEAVE,   stopDown);			doDown();			_scrTimer = new Timer(100);			_scrTimer.addEventListener(TimerEvent.TIMER, doDown);			_scrTimer.start();		}		private function doDown(event:* = null):void {			if (_btnV.y < _dArr.y - _dArr.height - _btnV.height - _jumpGapV) {				_btnV.y += _jumpGapV;			}			else {				_btnV.y = _dArr.y - _dArr.height - _btnV.height;				_scrTimer.stop();			}			placeContentY();		}		private function stopDown(event:* = null):void {			_scrTimer.stop();			placeContentY();			stage.removeEventListener(MouseEvent.MOUSE_UP, stopDown);			stage.removeEventListener(Event.MOUSE_LEAVE,   stopDown);		}		private function scrollLeft(event:Event):void {			stage.addEventListener(MouseEvent.MOUSE_UP, stopLeft);			stage.addEventListener(Event.MOUSE_LEAVE,   stopLeft);			doLeft();			_scrTimer = new Timer(100);			_scrTimer.addEventListener(TimerEvent.TIMER, doLeft);			_scrTimer.start();		}		private function doLeft(event:* = null):void {			if (_btnH.x > _lArr.width + _jumpGapH) {				_btnH.x   -= _jumpGapH;			}			else {				_btnH.x    = _lArr.width;				_scrTimer.stop();			}			placeContentX();		}		private function stopLeft(event:* = null):void {			_scrTimer.stop();			placeContentX();			stage.removeEventListener(MouseEvent.MOUSE_UP, stopLeft);			stage.removeEventListener(Event.MOUSE_LEAVE,   stopLeft);		}		private function scrollRight(event:Event):void {			stage.addEventListener(MouseEvent.MOUSE_UP, stopRight);			stage.addEventListener(Event.MOUSE_LEAVE,   stopRight);			doRight();			_scrTimer = new Timer(100);			_scrTimer.addEventListener(TimerEvent.TIMER, doRight);			_scrTimer.start();		}		private function doRight(event:* = null):void {			if (_btnH.x < _rArr.x - _rArr.width - _btnH.width - _jumpGapH) {				_btnH.x += _jumpGapH;			}			else {				_btnH.x = _rArr.x - _rArr.width - _btnH.width;				_scrTimer.stop();			}			placeContentX();		}		private function stopRight(event:* = null):void {			_scrTimer.stop();			placeContentX();			stage.removeEventListener(MouseEvent.MOUSE_UP, stopRight);			stage.removeEventListener(Event.MOUSE_LEAVE,   stopRight);		}		private function scrollDragV(event:Event):void {			stage.addEventListener(MouseEvent.MOUSE_UP, stopDragV);			stage.addEventListener(Event.MOUSE_LEAVE,   stopDragV);			_scrTimer = new Timer(30);			_scrTimer.addEventListener(TimerEvent.TIMER, placeContentY);			_scrTimer.start();			_btnV.startDrag(false, new Rectangle(_bgrV.x, Math.floor(_bgrV.y), 0, Math.ceil(_bgrV.height - _btnV.height)));		}		private function stopDragV(event:* = null) {			stage.removeEventListener(MouseEvent.MOUSE_UP, stopDragV);			stage.removeEventListener(Event.MOUSE_LEAVE,   stopDragV);			_scrTimer.stop();			_btnV.stopDrag();			placeContentY();		}		private function scrollDragH(event:Event):void {			stage.addEventListener(MouseEvent.MOUSE_UP, stopDragH);			stage.addEventListener(Event.MOUSE_LEAVE,   stopDragH);			_scrTimer = new Timer(30);			_scrTimer.addEventListener(TimerEvent.TIMER, placeContentX);			_scrTimer.start();			_btnH.startDrag(false, new Rectangle(Math.floor(_bgrH.x), _bgrH.y, Math.ceil(_bgrH.width - _btnH.width), 0));		}		private function stopDragH(event:* = null) {			stage.removeEventListener(MouseEvent.MOUSE_UP, stopDragH);			stage.removeEventListener(Event.MOUSE_LEAVE,   stopDragH);			_scrTimer.stop();			_btnH.stopDrag();			placeContentX();		}		private function placeContentY(event:* = null):void {			_content.y = (_bgrV.y - _btnV.y) / (_bgrV.height - _btnV.height) * _scrDifV;		}		private function placeContentX(event:* = null):void {			_content.x = (_bgrH.x - _btnH.x) / (_bgrH.width - _btnH.width) * _scrDifH;		}		/* scroll settings		 */		public function get verticalScroll():Boolean {			return _scrV;		}		public function set verticalScroll(able:Boolean):void {			_scrV = able;			if (_addedToStage) {				setSkin();				_content.visible = true;			}		}		public function get horizontalScroll():Boolean {			return _scrH;		}		public function set horizontalScroll(able:Boolean):void {			_scrH = able;			if (_addedToStage) {				setSkin();				_content.visible = true;			}		}		public function get content():MovieClip {			return _content;		}		// overrides to use only		// internal clip (_content)		//		public override function addChild(child:DisplayObject):DisplayObject {			var toReturn:* = _content.addChild(child);			setSkin();			return toReturn;		}		public override function addChildAt(child:DisplayObject, index:int):DisplayObject {			var toReturn:* = _content.addChildAt(child, index);			setSkin();			return toReturn;		}		public override function removeChild(child:DisplayObject):DisplayObject {			var toReturn:* = _content.removeChild(child);			setSkin();			return toReturn;		}		public override function removeChildAt(index:int):DisplayObject {			var toReturn:* = _content.removeChildAt(index);			setSkin();			return toReturn;		}		public override function getChildAt(index:int):DisplayObject {			return _content.getChildAt(index);		}		public override function getChildByName(name:String):DisplayObject {			return _content.getChildByName(name);		}		public override function getChildIndex(child:DisplayObject):int {			return _content.getChildIndex(child);		}		public override function setChildIndex(child:DisplayObject, index:int):void {			_content.setChildIndex(child, index);		}		public override function swapChildren(child1:DisplayObject, child2:DisplayObject):void {			_content.swapChildren(child1, child2);		}		public override function swapChildrenAt(index1:int, index2:int):void {			_content.swapChildrenAt(index1, index2);		}		public override function get numChildren():int {			return _content.numChildren;		}	}}