package com.memento.flash.display {	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.geom.Matrix;	import flash.geom.Rectangle;	import flash.display.GradientType;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.text.AntiAliasType;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.TextFieldType;	import flash.text.TextFormat;	import com.memento.flash.display.TimeBar;	import com.memento.flash.events.CustomEvent;	public class TimeBar extends MovieClip {		public static const TIME_BAR_UPDATED:String = "TimeBarUpdated";		private const dGAP:int = 50;		private var _monthsOfYear:Array = new Array(			"Január",			"Február",			"Március",			"Április",			"Május",			"Június",			"Júlis",			"Augusztus",			"Szeptember",			"Október",			"November",			"December"		);        private var _daysOfWeek:Array = new Array(			"Vasárnap",			"Hétfő",			"Kedd",			"Szerda",			"Csütörtök",			"Péntek",			"Szombat"		);        private var _daysOfMonths:Array = new Array(31, 31, 30, 31, 30, 31,													31, 30, 31, 30, 31);		private var _daysArray:Array;		private var _showDate:Date;		private var _leftDragger:MovieClip;		private var _rightDragger:MovieClip;		private var _between:Sprite;		private var _labelRight:TextField;		private var _labelLeft:TextField;		private var _text0:TextField;		private var _text1:TextField;		private var _text2:TextField;		private var _labelFormat:TextFormat;		private var _stateFormat:TextFormat;		private var _gradMatrix:Matrix;		private var _dragRect:Rectangle;		private var _scroller:MovieClip;		private var _statesArr:Array;		private var _selectedState:int;		private var _leftValue		private var _rightValue		public function TimeBar(statesArray:Array = null, dateToShow:Date = null):void {			if (statesArray) {				_statesArr = statesArray;			}			else {				_statesArr = new Array({step:3,  name:"3 hónap"},									   {step:6,  name:"fél év"},									   {step:12, name:"egy év"},									   {step:36, name:"három év"},									   {step:72, name:"hat év"});			}			if (dateToShow) {				_showDate = dateToShow;			}			else {				_showDate = new Date();			}			_selectedState     = 0;			_labelFormat       = new TextFormat();			_labelFormat.size  = 14;			_labelFormat.color = 0x000000;			_labelFormat.font  = "Skia";			_stateFormat       = new TextFormat();			_stateFormat.size  = 10;			_stateFormat.color = 0x000000;			_stateFormat.font  = "Skia";			_gradMatrix = new Matrix();			_gradMatrix.createGradientBox(14, 14, Math.PI/2);			// bgr			//			with (graphics) {				lineStyle(0, 0, 0);				beginFill(0x666666);				drawRect(0, 50, 550, 6);				endFill();				beginFill(0, 0);				drawRect(0, 0, 550, 150);				endFill();			}			// draggers			//			_leftDragger = new MovieClip();			with (_leftDragger.graphics) {				lineStyle(0, 0, 0);				beginGradientFill(GradientType.LINEAR, [0xded065, 0xf9f7c9], [1, 1], [0x00, 0xFF], _gradMatrix);				drawCircle(7, 7, 7);				endFill();			}			_leftDragger.x          = 100;			_leftDragger.y          = 46;			_leftDragger.buttonMode = true;			_leftDragger.addEventListener(MouseEvent.MOUSE_DOWN, startDragLeft);			addChild(_leftDragger);			_rightDragger = new MovieClip();			with (_rightDragger.graphics) {				lineStyle(0, 0, 0);				beginGradientFill(GradientType.LINEAR, [0xded065, 0xf9f7c9], [1, 1], [0x00, 0xFF], _gradMatrix);				drawCircle(7, 7, 7);				endFill();			}			_rightDragger.x          = 450;			_rightDragger.y          = 46;			_rightDragger.buttonMode = true;			_rightDragger.addEventListener(MouseEvent.MOUSE_DOWN, startDragRight);			addChild(_rightDragger);			// between			//			_between = new Sprite();			_gradMatrix.createGradientBox(350, 14, Math.PI/2);			with (_between.graphics) {				lineStyle(0, 0, 0);				beginGradientFill(GradientType.LINEAR, [0x82c6e6, 0xe4f5fd], [1, 1], [0x00, 0xFF], _gradMatrix);				drawRect(0, 0, 350, 14);				endFill();			}			_between.x          = _leftDragger.x  + _leftDragger.width/2;			_between.y          = 45;			_between.width      = _rightDragger.x + _rightDragger.width/2 - _between.x;			_between.buttonMode = true;			_gradMatrix         = new Matrix();			_between.addEventListener(MouseEvent.MOUSE_DOWN, startDragBetween);			addChildAt(_between, 0);			// textfields			//			_text0                 = new TextField();			_text0.mouseEnabled    = false;			_text0.embedFonts      = true;			//_text0.antiAliasType   = AntiAliasType.NORMAL;			_text0.autoSize        = TextFieldAutoSize.LEFT;			_text0.x               = 15;			_text0.y               = 6;			_text0.alpha           = 0.6;			addChild(_text0);			_text1                 = new TextField();			_text1.mouseEnabled    = false;			_text1.embedFonts      = true;			//_text1.antiAliasType   = AntiAliasType.NORMAL;			_text1.autoSize        = TextFieldAutoSize.CENTER;			_text1.x               = 275;			_text1.y               = 6;			_text1.alpha           = 0.6;			addChild(_text1);			_text2                 = new TextField();			_text2.mouseEnabled    = false;			_text2.embedFonts      = true;			//_text2.antiAliasType   = AntiAliasType.NORMAL;			_text2.autoSize        = TextFieldAutoSize.RIGHT;			_text2.x               = 535;			_text2.y               = 6;			_text2.alpha           = 0.6;			addChild(_text2);			updateBgr();			_labelLeft                 = new TextField();			_labelLeft.mouseEnabled    = false;			_labelLeft.embedFonts      = true;			_labelLeft.multiline       = false;			//_labelLeft.antiAliasType   = AntiAliasType.NORMAL;			_labelLeft.border          = true;			_labelLeft.borderColor     = 0x000000;			_labelLeft.backgroundColor = 0xf9f3d2;			_labelLeft.x               = dGAP;			_labelLeft.y               = _leftDragger.y + _leftDragger.height + 30;			_labelLeft.width           = 140;			_labelLeft.height          = 20;			addChild(_labelLeft);			_labelRight                 = new TextField();			_labelRight.mouseEnabled    = false;			_labelRight.embedFonts      = true;			_labelRight.multiline       = false;			//_labelRight.antiAliasType   = AntiAliasType.NORMAL;			_labelRight.border          = true;			_labelRight.borderColor     = 0x000000;			_labelRight.backgroundColor = 0xf9f3d2;			_labelRight.x               = width - _labelRight.width - dGAP;			_labelRight.y               = _rightDragger.y + _rightDragger.height + 30;			_labelRight.width           = 140;			_labelRight.height          = 20;			addChild(_labelRight);			// scroller			//			_scroller         = new MovieClip();			_scroller.alpha   = 0;			updateScroller();			addChild(_scroller);			calcValues();			addEventListener(MouseEvent.MOUSE_WHEEL, changeState);		}		private function changeState(event:MouseEvent):void {			trace("wheel");			if (parent.hitTestPoint(mouseX, mouseY)) {				(event.delta < 0) ? (_selectedState++) : (_selectedState--);				if (_selectedState >= _statesArr.length) _selectedState = 0;				if (_selectedState <= -1)                _selectedState = _statesArr.length-1;				updateScroller();				calcValues();				updateBgr();				_scroller.alpha   = 1;			}		}		private function startDragLeft(event:MouseEvent):void {			_dragRect        = new Rectangle();			_dragRect.x      = dGAP;			_dragRect.y      =_leftDragger.y;			_dragRect.width  = _rightDragger.x - _leftDragger.width - dGAP;			_dragRect.height = 0;			_leftDragger.startDrag(false, _dragRect);			stage.addEventListener(MouseEvent.MOUSE_MOVE,  calcBetween);			stage.addEventListener(MouseEvent.MOUSE_UP,    stopDragging);			stage.addEventListener(Event.MOUSE_LEAVE,      stopDragging);		}		private function startDragRight(event:MouseEvent):void {			_dragRect        = new Rectangle();			_dragRect.x      = _leftDragger.x + _leftDragger.width;			_dragRect.y      = _rightDragger.y,			_dragRect.width  = width - _dragRect.x - _rightDragger.width - dGAP,			_dragRect.height = 0;			_rightDragger.startDrag(false, _dragRect);			stage.addEventListener(MouseEvent.MOUSE_MOVE, calcBetween);			stage.addEventListener(MouseEvent.MOUSE_UP,   stopDragging);			stage.addEventListener(Event.MOUSE_LEAVE,     stopDragging);		}		private function startDragBetween(event:MouseEvent):void {			_dragRect        = new Rectangle();			_dragRect.x      = dGAP + _leftDragger.width/2;			_dragRect.y      = _between.y,			_dragRect.width  = width - _between.width - _leftDragger.width/2 - _rightDragger.width/2 - 2*dGAP;			_dragRect.height = 0;			_between.startDrag(false, _dragRect);			stage.addEventListener(MouseEvent.MOUSE_MOVE, calcButtons);			stage.addEventListener(MouseEvent.MOUSE_UP,   stopDragging);			stage.addEventListener(Event.MOUSE_LEAVE,     stopDragging);		}		private function stopDragging(event:MouseEvent):void {			_leftDragger.stopDrag();			_rightDragger.stopDrag();			_between.stopDrag();			dispatchEvent(new CustomEvent(TIME_BAR_UPDATED, {left: _leftValue, right: _rightValue}));			stage.removeEventListener(MouseEvent.MOUSE_MOVE, calcBetween);			stage.removeEventListener(MouseEvent.MOUSE_MOVE, calcButtons);			stage.removeEventListener(MouseEvent.MOUSE_UP,   stopDragging);			stage.removeEventListener(Event.MOUSE_LEAVE,     stopDragging);			_scroller.visible = false;		}		private function calcBetween(event:MouseEvent):void {			_between.x     = _leftDragger.x  + _leftDragger.width/2;			_between.width = _rightDragger.x + _rightDragger.width/2 - _between.x;			calcValues();		}		private function calcButtons(event:MouseEvent):void {			_leftDragger.x  = _between.x - _leftDragger.width / 2;			_rightDragger.x = _between.x + _between.width -_rightDragger.width / 2;			calcValues();		}		private function calcValues(event:MouseEvent = null):void {			if (mouseX < -5) {				_scroller.x = 5;			}			else if (mouseX > width - _scroller.width - 15) {				_scroller.x = width - _scroller.width - 5;			}			else {				_scroller.x = mouseX + 10;			}			_scroller.visible = false;			var interestedWidth:Number = width - (2*dGAP) - _leftDragger.width - _rightDragger.width;			var interestedDay:uint;			interestedDay = Math.floor(((_leftDragger.x-dGAP) / interestedWidth) *_daysArray.length);			if (interestedDay <0) {				interestedDay = 0;			}			else if (interestedDay > _daysArray.length-1) {				interestedDay = _daysArray.length-1;			}			_labelLeft.htmlText = '<P ALIGN="CENTER"><b>' + _daysArray[interestedDay].fullYear.toString() + ". " + _monthsOfYear[_daysArray[interestedDay].getMonth()] + " " + (_daysArray[interestedDay].getDate()).toString() + ".</b></P>";			_labelLeft.setTextFormat(_labelFormat);			_leftValue = _daysArray[interestedDay];			interestedDay = Math.floor(((_rightDragger.x-_leftDragger.width-dGAP) / interestedWidth) *_daysArray.length);			if (interestedDay < 0) {				interestedDay = 0;			}			else if (interestedDay > _daysArray.length-1) {				interestedDay = _daysArray.length-1;			}			_labelRight.htmlText = "<P ALIGN='CENTER'>" + _daysArray[interestedDay].fullYear.toString()+". " + _monthsOfYear[_daysArray[interestedDay].getMonth()] + " " + (_daysArray[interestedDay].getDate()).toString() + ".</P>";			_labelRight.setTextFormat(_labelFormat);			_rightValue = _daysArray[interestedDay];			if (_leftDragger.x < dGAP + _labelLeft.width) {				_labelLeft.x = dGAP;			}			else {				_labelLeft.x = _leftDragger.x - _labelLeft.width;			}			if (_rightDragger.x > width - dGAP - _labelRight.width - _rightDragger.width) {				_labelRight.x = width - dGAP - _labelRight.width;			}			else {				_labelRight.x = _rightDragger.x + _rightDragger.width;			}			if ((_labelLeft.x  == dGAP)                             && (_labelRight.x < _labelLeft.x  + _labelLeft.width)) _labelRight.x = Math.floor(_labelLeft.x  + _labelLeft.width);			if ((_labelRight.x == width - dGAP - _labelRight.width) && (_labelLeft.x  > _labelRight.x - _labelLeft.width)) _labelLeft.x  = Math.floor(_labelRight.x - _labelLeft.width);		}		private function updateScroller():void {			while (_scroller.numChildren > 0) _scroller.removeChildAt(0);			var whereToY:Number = 0;			var i:uint          = 0;			var label:TextField;			for (i=_selectedState; i<_statesArr.length; i++) {				label               = new TextField();				label.mouseEnabled  = false;				label.embedFonts    = true;				//label.antiAliasType = AntiAliasType.NORMAL;				label.border        = true;				label.background    = true;				label.borderColor   = 0x000000;				label.y             = whereToY-20;				label.width         = 100;				label.height        = 14;				label.alpha         = 0.8;				label.text          = _statesArr[i].name;				if (i == _selectedState) {					label.backgroundColor = 0xddddff;				}				else {					label.backgroundColor = 0xf9f3d2;				}				label.setTextFormat(_stateFormat);				_scroller.addChild(label);				whereToY += 14;			}			for (i=0; i<_selectedState; i++) {				label                 = new TextField();				label.mouseEnabled    = false;				label.embedFonts      = true;				//label.antiAliasType   = AntiAliasType.NORMAL;				label.border          = true;				label.background      = true;				label.borderColor     = 0x000000;				label.y               = whereToY-20;				label.width           = 100;				label.height          = 14;				label.alpha           = 0.8;				label.text            = _statesArr[i].name;				label.backgroundColor = 0xf9f3d2;				label.setTextFormat(_stateFormat);				_scroller.addChild(label);				whereToY += 14;			}		}		private function updateBgr():void {			var year:int   = _showDate.getFullYear();			var month:uint = _showDate.getMonth();			var day:uint   = _showDate.getDate();			var yearToJump:int   = Math.floor(_statesArr[_selectedState].step/12) as uint;			var monthToJump:uint = _statesArr[_selectedState].step%12 as uint;			var nextYear:int  = year  + yearToJump;			var nextMonth:int = month + monthToJump;			if (nextMonth>11) {				prevMonth -= 12;				nextYear++;			}			var prevYear:int  = year  - yearToJump;			var prevMonth:int = month - monthToJump;			if (prevMonth<0) {				prevMonth += 12;				prevYear--;			}			_text0.text = prevYear.toString()+". " + _monthsOfYear[prevMonth] + " " + day.toString() + ".";			_text0.setTextFormat(_labelFormat);			_text1.text = year.toString()+". " + _monthsOfYear[month] + " " + day.toString() + ".";			_text1.setTextFormat(_labelFormat);			_text2.text = nextYear.toString()+". " + _monthsOfYear[nextMonth] + " " + day.toString() + ".";			_text2.setTextFormat(_labelFormat);			_daysArray = new Array();			var monthLimit:uint;			var dayLimit:uint;			var currentDay:uint = day;			while (prevYear < nextYear+1) {								monthLimit = ((prevYear != nextYear) ? (12) : (nextMonth+1));				while (prevMonth<monthLimit) {					dayLimit = ( ((prevYear!=nextYear) || (prevMonth!=nextMonth)) ? ((prevYear%4 == 0 && prevYear%100 != 0 && prevMonth == 1) ? (30) : (_daysOfMonths[prevMonth]+1)) : (day+1));					while (currentDay<dayLimit) {						_daysArray.push(new Date(prevYear, prevMonth, currentDay));						currentDay++;					}					currentDay = 1;					prevMonth++;				}				prevYear++;				prevMonth = 0;			}		}	}}