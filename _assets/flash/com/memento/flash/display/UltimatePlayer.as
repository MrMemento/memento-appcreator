package com.memento.flash.display {	import flash.display.Sprite;	import flash.display.MovieClip;	import flash.display.StageDisplayState;	import flash.events.Event;	import flash.events.FullScreenEvent;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.geom.Rectangle;	import flash.net.SharedObject;	import flash.utils.Timer;	import fl.video.FLVPlayback;	import fl.video.MetadataEvent;	import fl.video.VideoAlign;	import fl.video.VideoEvent;	import fl.video.VideoProgressEvent;	import fl.video.VideoScaleMode;	import fl.video.VideoState;	public class UltimatePlayer extends MovieClip {		public static const VIDEO_END:String         = 'VideoHasEnded';		public static const VIDEO_PLAYING:String     = 'VideoHasStartedPlaying';		public static const VIDEO_PAUSED:String      = 'VideoHasJustPaused';		public static const VIDEO_ERROR:String       = 'ErrorHasOccured';		public static const VIDEO_BUFFERING:String   = 'VideoIsInBufferingState';		public static const VIDEO_SEEKING:String     = 'VideoIsInSeekingState';		public static const VIDEO_METADATA:String    = 'VideoMetadataRecieved';		public static const LOGO_TOP_LEFT:String     = 'ToTopLeft';		public static const LOGO_TOP_RIGHT:String    = 'ToTopRight';		public static const LOGO_BOTTOM_LEFT:String  = 'ToBottomLeft';		public static const LOGO_BOTTOM_RIGHT:String = 'ToBottomRight';		public static const CONTROL_OVER:String      = 'ControlOverVideo';		public static const CONTROL_UNDER:String     = 'ControlUnderVideo';		public static var CONTROL_PLACE:String       = CONTROL_OVER;		public static var LOGO_GAP:Number            = 10;		public static var LOGO_PLACE:String          = LOGO_TOP_LEFT;		public static var PLAYER_BUFFER_TIME:Number  = 5;		public static var MIN_SCALE_WIDTH:Number     = 300;		public static var MIN_SCALE_HEIGHT:Number    = 200;		public static var PLAYER_BGR_COLOR:Number    = 0;		public static var FADER_ALPHA:Number         = 0.1;		private var _playerBgr:Sprite;		private var _player:FLVPlayback;		private var _control:MovieClip;		private var _logo:MovieClip;		private var _fader:MovieClip;		private var _myPlay:MovieClip;		private var _myBuffer:MovieClip;		private var _playPauseEnabled:Boolean;		private var _customInvocation:Function;		private var _file:String;		private var _title:String;		private var _phpFlvProvider:String;		private var _metadataForVideo:Boolean;		private var _metadataKeyframes:Boolean;		private var _keyFrames:Object;		private var _totalTime:Number;		private var _totalTimeString:String;		private var _doubleClickTimer:Timer;		private var _scrubTimer:Timer;		private var _fullScreenTimer:Timer;		private var _timeOffset:Number;		private var _pixelOffset:Number;		private var _sharedObj:SharedObject;		public function UltimatePlayer(controlClip:MovieClip,									   myWidth:uint              = 400,									   myHeight:uint             = 300,									   sharedObject:SharedObject = null,									   PlayBtnClass:Class        = null,									   BufferAnimClass:Class     = null,									   LogoClass:Class           = null):void {			// set from outside			//			_phpFlvProvider = null;			_sharedObj      = sharedObject;			// CONTROLS			_playPauseEnabled      = true;			_control               = controlClip;			_control.mouseChildren = false;			// enable it, when metadata is reachable			//			if (_control.seek) {				_control.seek.bgr.mouseEnabled   = false;				_control.seek.bgr.alpha          = 0.5;				_control.seek.btn.mouseEnabled   = false;				_control.seek.btn.alpha          = 0.5;				_control.seek.pos.mouseEnabled   = false;				_control.seek.pos.width          = 0;				_control.seek.loaded.mouseEnabled  = false;				_control.seek.loaded.width         = 0;			}			if (_control.volume) {				_control.volume.bgr.addEventListener(MouseEvent.MOUSE_DOWN, setVolume);				_control.volume.bgr.buttonMode   = true;				_control.volume.btn.addEventListener(MouseEvent.MOUSE_DOWN, setVolume);				_control.volume.btn.buttonMode   = true;				_control.volume.pos.mouseEnabled = false;				_control.volume.pos.width        = 0;			}			if (_control.playPause) {				_control.playPause.pauseBtn.visible = false;				_control.playPause.playBtn.addEventListener(MouseEvent.CLICK,					function(e:MouseEvent):void {						if (_playPauseEnabled) {							if (_player.state == VideoState.PAUSED) {									_player.play();							}							else if (_player.state == VideoState.STOPPED) {										if (_metadataKeyframes && _phpFlvProvider) {											_player.load(_phpFlvProvider + '?file=' + _file + '&position=' + _keyFrames.filepositions[0] + '&bandwidth=mid');								}								else {											_player.seek(0);								}										_player.play();							}						}						// other things, that should happen						//						if (_customInvocation != null)							_customInvocation();					}				);					_control.playPause.pauseBtn.addEventListener(MouseEvent.CLICK,					function(e:MouseEvent){						if (_playPauseEnabled)							_player.pause();						// other things, that should happen						//						if (_customInvocation != null)							_customInvocation();					}				);			}			else {				faderPlayPause = false;			}			if (_control.fullscreenBtn)				_control.fullscreenBtn.addEventListener(MouseEvent.CLICK, switchFullScreen);			addEventListener(Event.ADDED_TO_STAGE,				function(e:Event) {					//stage.addEventListener(FullScreenEvent.FULL_SCREEN, changeScreenSettings);					if (_control.parent)						_control.parent.setChildIndex(_control, _control.parent.numChildren-1);				}			);			// PLAYER BGR			_playerBgr = new Sprite();			with (_playerBgr.graphics) {				beginFill(PLAYER_BGR_COLOR);				drawRect(0, 0, myWidth, myHeight);				endFill();			}			addChild(_playerBgr);			// PLAYER			_player = new FLVPlayback();						_player.activeVideoPlayerIndex      = 1;			_player.getVideoPlayer(1).smoothing = true;			_player.visibleVideoPlayerIndex     = 1;			_player.bufferTime                  = PLAYER_BUFFER_TIME;			_player.align                       = VideoAlign.CENTER;			_player.autoPlay                    = false;			_player.autoRewind                  = false;			_player.isLive                      = false;			_player.fullScreenBackgroundColor   = 0x000000;			_player.fullScreenTakeOver          = false;			_player.playheadUpdateInterval      = 200;			_player.progressInterval            = 200;			_player.scaleMode                   = VideoScaleMode.MAINTAIN_ASPECT_RATIO;			_player.seekBarScrubTolerance       = 5;			_player.skin                        = '';			_player.removeEventListener(MetadataEvent.METADATA_RECEIVED, metadataHandler);			_player.removeEventListener(VideoEvent.PLAYHEAD_UPDATE,      playheadUpdateHandler);			_player.removeEventListener(VideoProgressEvent.PROGRESS,     progressHandler);			_player.removeEventListener(VideoEvent.STATE_CHANGE,         stateChangeHandler);						_player.addEventListener(MetadataEvent.METADATA_RECEIVED,    metadataHandler);			_player.addEventListener(VideoEvent.PLAYHEAD_UPDATE,         playheadUpdateHandler);			_player.addEventListener(VideoProgressEvent.PROGRESS,        progressHandler);			_player.addEventListener(VideoEvent.STATE_CHANGE,            stateChangeHandler);			if (_sharedObj) {				if (_sharedObj.data.myVidVolume) {					_player.volume            = _sharedObj.data.myVidVolume;					_control.volume.btn.x     = _control.volume.bgr.x + _control.volume.bgr.width * _sharedObj.data.myVidVolume - _control.volume.btn.width/2;					_control.volume.pos.width = _control.volume.bgr.width * _sharedObj.data.myVidVolume;				}				else {					_player.volume = 0;				}			}			else {				_player.volume = 0;			}			addChild(_player);			// LOGO			if (LogoClass) {				_logo   = new LogoClass() as MovieClip;				addChild(_logo);			}			// VIDEO HIT AND FADE AT PAUSE			_fader = new MovieClip();			with (_fader.graphics) {				lineStyle(0,0,0);				beginFill(0, FADER_ALPHA);				drawRect(0, 0, myWidth, myHeight);				endFill();			}			if (PlayBtnClass) {				_myPlay = new PlayBtnClass() as MovieClip;				// acts only as graphic				//				_myPlay.mouseEnabled  = false;				_myPlay.mouseChildren = false;				_myPlay.alpha         = 0;				_myPlay.x = (_fader.width  - _myPlay.width)  /2;				_myPlay.y = (_fader.height - _myPlay.height) /7 *3;				_fader.addChild(_myPlay);			}			if (BufferAnimClass) {				_myBuffer = new BufferAnimClass() as MovieClip;				// acts only as graphic				//				_myBuffer.mouseEnabled  = false;				_myBuffer.mouseChildren = false;				_myBuffer.alpha         = 0;				_myBuffer.x = (_fader.width  - _myBuffer.width)  /2;				_myBuffer.y = _myPlay.y + _myPlay.height +10;				_fader.addChild(_myBuffer);							}			_fader.addEventListener(MouseEvent.CLICK, handleVideoClick);			addChild(_fader);			setSize(myWidth, myHeight);			_doubleClickTimer = new Timer(300, 1);		}		//----------------------------------------------------------------------------------------------------------------------------		// INVOCATIONS		public function loadItem(location:String, autoStart:Boolean = false):void {			_player.visibleVideoPlayerIndex     = 0;			_player.activeVideoPlayerIndex      = 0;			_player.closeVideoPlayer(1);			_player.activeVideoPlayerIndex      = 1;			_player.getVideoPlayer(1).smoothing = true;			_player.visibleVideoPlayerIndex     = 1;			_player.bufferTime                  = PLAYER_BUFFER_TIME;			_player.align                       = VideoAlign.CENTER;			_player.autoPlay                    = false;			_player.autoRewind                  = false;			_player.isLive                      = false;			_player.fullScreenBackgroundColor   = 0x000000;			_player.fullScreenTakeOver          = false;			_player.playheadUpdateInterval      = 200;			_player.progressInterval            = 200;			_player.scaleMode                   = VideoScaleMode.MAINTAIN_ASPECT_RATIO;			_player.seekBarScrubTolerance       = 5;			_player.skin                        = '';			if (_sharedObj) {				if (_sharedObj.data.myVidVolume) {					_player.getVideoPlayer(1).volume = _sharedObj.data.myVidVolume;					_control.volume.btn.x            = _control.volume.bgr.x + _control.volume.bgr.width * _sharedObj.data.myVidVolume - _control.volume.btn.width/2;					_control.volume.pos.width        = _control.volume.bgr.width * _sharedObj.data.myVidVolume;				}				else {					_player.getVideoPlayer(1).volume = 0;				}			}			else {				_player.getVideoPlayer(1).volume = 0;			}			_file              = location;			_metadataForVideo  = false;			_metadataKeyframes = false;			// not to calculate all the time			//			_totalTimeString = '0';			_totalTime       = 0;			// enable it, when metadata is reachable			//			if (_control.seek) {				_control.seek.loaded.mouseEnabled = false;				_control.seek.loaded.buttonMode   = false;				_control.seek.bgr.mouseEnabled    = false;				_control.seek.bgr.buttonMode      = false;				_control.seek.btn.mouseEnabled    = false;				_control.seek.btn.buttonMode      = false;				_control.seek.bgr.alpha    = 0.5;				_control.seek.btn.alpha    = 0.5;				_control.seek.btn.x        = _control.seek.bgr.x - _control.seek.btn.width/2; 				_control.seek.loaded.width = 0;				_control.seek.loaded.x     = _control.seek.bgr.x;				_control.seek.pos.width    = 0;				_control.seek.pos.x        = _control.seek.bgr.x;				_control.seek.loaded.removeEventListener(MouseEvent.MOUSE_DOWN, loadDownHandler);				_control.seek.bgr.removeEventListener(MouseEvent.MOUSE_DOWN,    bgrDownHandler);				_control.seek.btn.removeEventListener(MouseEvent.MOUSE_DOWN,    loadDownHandler);				_control.seek.btn.removeEventListener(MouseEvent.MOUSE_DOWN,    bgrDownHandler);				stage.removeEventListener(MouseEvent.MOUSE_UP,                  loadUpHandler);				stage.removeEventListener(Event.MOUSE_LEAVE,                    loadUpHandler);				stage.removeEventListener(MouseEvent.MOUSE_UP,                  bgrUpHandler);				stage.removeEventListener(Event.MOUSE_LEAVE,                    bgrUpHandler);				// will be used with PHP streaming				//				_timeOffset  = 0;				_pixelOffset = _control.seek.bgr.x;			}			try {				_player.load(location);				if (autoStart)					_player.play();			}			catch (error:Error) {				title = 'Hiba a viedó letöltése közben';			}		}		public function handleVideoClick(event:MouseEvent):void {			if (_playPauseEnabled) {				if (_player.state == VideoState.PLAYING) {					_player.pause();				}				else if (_player.state == VideoState.PAUSED) {					_player.play();				}				else if (_player.state == VideoState.STOPPED || _player.state == VideoState.LOADING) {					if (_metadataKeyframes && _phpFlvProvider != null) {						_player.load(_phpFlvProvider + '?file=' + _file + '&position=' + _keyFrames.filepositions[0] + '&bandwidth=mid');					}					else {						_player.seek(0);					}					_player.play();				}			}			// double click			//			if (_control.fullscreenBtn) {				if (_doubleClickTimer.running) {					_control.fullscreenBtn.dispatchEvent(new MouseEvent(MouseEvent.CLICK));					_doubleClickTimer.stop();				}				else {					_doubleClickTimer.start();				}			}			// other things, that should happen			//			if (_customInvocation != null)				_customInvocation();		}		public function switchFullScreen(event:MouseEvent):void {			switch(stage.displayState) {				case StageDisplayState.NORMAL:					stage.displayState = StageDisplayState.FULL_SCREEN;					break;				case StageDisplayState.FULL_SCREEN:					stage.displayState = StageDisplayState.NORMAL;					break;				default:					stage.displayState = StageDisplayState.NORMAL;					break;			}		}		//----------------------------------------------------------------------------------------------------------------------------		// SCRUBBING HANDLERS		private function bgrDownHandler(event:MouseEvent):void {			_player.removeEventListener(VideoEvent.PLAYHEAD_UPDATE, playheadUpdateHandler);			_player.pause();			streamScrub();			_scrubTimer = new Timer(30);			_scrubTimer.addEventListener(TimerEvent.TIMER, streamScrub);			_scrubTimer.start();			stage.addEventListener(MouseEvent.MOUSE_UP, bgrUpHandler);			stage.addEventListener(Event.MOUSE_LEAVE,   bgrUpHandler);		}		private function bgrUpHandler(event:*):void {			_scrubTimer.stop();			// PHP seek			//			if (_player.isRTMP) {				_player.playheadTime = pixelToTime(_control.seekBtn.x);			}			else {				scrubit();			}			stage.removeEventListener(MouseEvent.MOUSE_UP, bgrUpHandler);			stage.removeEventListener(Event.MOUSE_LEAVE,   bgrUpHandler);			_player.addEventListener(VideoEvent.PLAYHEAD_UPDATE, playheadUpdateHandler);			_player.play();		}		private function loadDownHandler(event:MouseEvent):void {			_player.removeEventListener(VideoEvent.PLAYHEAD_UPDATE, playheadUpdateHandler);			_player.pause();			progressiveScrub();			_scrubTimer = new Timer(30);			_scrubTimer.addEventListener(TimerEvent.TIMER, progressiveScrub);			_scrubTimer.start();			stage.addEventListener(MouseEvent.MOUSE_UP, loadUpHandler);			stage.addEventListener(Event.MOUSE_LEAVE,   loadUpHandler);		}		private function loadUpHandler(event:*):void {			_scrubTimer.stop();			// progressive seek			//			_player.playheadTime = pixelToTime(_control.seek.btn.x);			stage.removeEventListener(MouseEvent.MOUSE_UP, loadUpHandler);			stage.removeEventListener(Event.MOUSE_LEAVE,   loadUpHandler);			_player.addEventListener(VideoEvent.PLAYHEAD_UPDATE, playheadUpdateHandler);			_player.play();		}		private function scrubit():void {			var tofind:Number = pixelToTime(_control.seekBtn.x);			for (var i:uint=0; i<_keyFrames.times.length; i++) {				var j:uint = i+1;				if ((_keyFrames.times[i] <= tofind) && (_keyFrames.times[j] > tofind)) {					_timeOffset  = _keyFrames.times[i];					_pixelOffset = timeToPixel(_timeOffset);					_control.seek.btn.x      = _pixelOffset;					_control.seek.loaded.x     = _pixelOffset;					_control.seek.loaded.width = 0;					_player.load(_phpFlvProvider + '?file=' + _file + '&position=' + _keyFrames.filepositions[i] + '&bandwidth=mid');					break;				}			}		}		private function progressiveScrub(event:TimerEvent = null):void {			// should be handling bufferTime not to let playhead 'jump back'			// if video not fully loaded			//			var bufferPixelOffset:Number = Math.floor(_player.bufferTime / _totalTime * _control.seek.bgr.width);			if (_control.mouseX < _control.seek.bgr.x) {				_control.seek.btn.x = _control.seek.bgr.x - _control.seek.btn.width/2;			}			else if ( (_player.bytesLoaded != _player.bytesTotal) && (_control.mouseX > _control.seek.bgr.x + _control.seek.loaded.width - bufferPixelOffset) ) {				_control.seek.btn.x = _control.seek.bgr.x + _control.seek.loaded.width - bufferPixelOffset - _control.seek.btn.width/2;			}			else if (_control.mouseX > _control.seek.bgr.x + _control.seek.loaded.width) {				_control.seek.btn.x = _control.seek.bgr.x + _control.seek.loaded.width - _control.seek.btn.width/2;			}			else {				_control.seek.btn.x = _control.mouseX - _control.seek.btn.width/2;			}			_control.seek.pos.width = _control.seek.btn.x - _control.seek.bgr.x + _control.seek.btn.width/2;		}		private function streamScrub(event:TimerEvent = null):void {			if (_control.mouseX < _control.seek.bgr.x) {				_control.seek.btn.x = _control.seek.bgr.x - _control.seek.btn.width/2;			}			else if (_control.mouseX > _control.seek.bgr.x + _control.seek.bgr.width) {				_control.seek.btn.x = _control.seek.bgr.x + _control.seek.bgr.width - _control.seek.btn.width/2;			}			else {				_control.seek.btn.x = _control.mouseX - _control.seek.btn.width/2;			}			_control.seek.pos.width = _control.seek.btn.x - _control.seek.bgr.x + _control.seek.btn.width/2;		}		private function pixelToTime(pixel:Number):Number {			return Math.floor((pixel - _control.seek.bgr.x + _control.seek.btn.width/2) / _control.seek.bgr.width * _totalTime);		}		private function timeToPixel(time:Number):Number {			return Math.floor((time) / _totalTime * _control.seek.bgr.width + _control.seek.bgr.x - _control.seek.btn.width/2);		}		//----------------------------------------------------------------------------------------------------------------------------		// VOLUME HANDLERS		private function setVolume(event:MouseEvent):void {			volumeScrub();			_scrubTimer = new Timer(30);			_scrubTimer.addEventListener(TimerEvent.TIMER, volumeScrub);			_scrubTimer.start();			stage.addEventListener(MouseEvent.MOUSE_UP, stopSetVolume);			stage.addEventListener(Event.MOUSE_LEAVE,   stopSetVolume);		}		private function stopSetVolume(event:*):void {			_scrubTimer.stop();			stage.removeEventListener(MouseEvent.MOUSE_UP, stopSetVolume);			stage.removeEventListener(Event.MOUSE_LEAVE,   stopSetVolume);			if (_sharedObj) {				_sharedObj.data.myVidVolume = _player.volume;				_sharedObj.flush();			}		}		private function volumeScrub(event:TimerEvent = null):void {			if (_control.volume.mouseX < _control.volume.bgr.x) {				_control.volume.btn.x = _control.volume.bgr.x - _control.volume.btn.width/2;			}			else if (_control.volume.mouseX > _control.volume.bgr.x + _control.volume.bgr.width) {				_control.volume.btn.x = _control.volume.bgr.x + _control.volume.bgr.width - _control.volume.btn.width/2;			}			else {				_control.volume.btn.x = _control.volume.mouseX - _control.volume.btn.width/2;			}			_control.volume.pos.width = _control.volume.btn.x - _control.volume.bgr.x + _control.volume.btn.width/2;			_player.volume = _control.volume.pos.width / _control.volume.bgr.width;		}		//----------------------------------------------------------------------------------------------------------------------------		// EVENT HANDLERS		private function progressHandler(event:VideoProgressEvent):void {			if (_control.seek)				_control.seek.loaded.width = (_control.seek.bgr.width - _pixelOffset + _control.seek.bgr.x) * event.bytesLoaded / event.bytesTotal;			if (_myBuffer) {				if ( (_player.totalTime*(_player.bytesLoaded/_player.bytesTotal) - _player.playheadTime < _player.bufferTime *1.5) && (_player.bytesLoaded/_player.bytesTotal != 1) )					_myBuffer.alpha = 1;				else					_myBuffer.alpha = 0;			}		}		private function metadataHandler(event:MetadataEvent):void {			// without this, only play and pause is enabled			//			_metadataForVideo = true;			trace('\n- METADATA RECIEVED\n  (' + _player.source + ')');			if (event.info.keyframes != null) {				_metadataKeyframes = true;				_keyFrames = event.info.keyframes;			}			_totalTime = event.info.duration;			var num:Number;			var min_num:Number;			var sec_num:Number;			var my_minutes:String;			var my_seconds:String;			var timeStr:String;			num        = _totalTime;			min_num    = Math.floor(num/60);			sec_num    = Math.floor(num%60);			my_minutes = (min_num<10) ? ('0'+min_num.toString()) : (min_num.toString());			my_seconds = (sec_num<10) ? ('0'+sec_num.toString()) : (sec_num.toString());			_totalTimeString       = my_minutes + ':' + my_seconds;			if (_control.time_txt)				_control.time_txt.text = '[ 00:00 | ' + _totalTimeString + ' ]';			if (_control.seek) {				_control.seek.bgr.alpha = 1;				_control.seek.btn.alpha = 1;			}			if (_metadataKeyframes && _phpFlvProvider != null) {				trace('  - PHP SCRUBBING');				// set PHP scrubbing functions				//				if (_control.seek) {					_control.seek.bgr.mouseEnabled    = true;					_control.seek.bgr.buttonMode      = true;					_control.seek.btn.mouseEnabled    = true;					_control.seek.btn.buttonMode      = true;					_control.seek.loaded.mouseEnabled = false;						_control.seek.bgr.addEventListener(MouseEvent.MOUSE_DOWN, bgrDownHandler);					_control.seek.btn.addEventListener(MouseEvent.MOUSE_DOWN, bgrDownHandler);				}				// start loading video from position 0 without metadata n things				//				_player.load(_phpFlvProvider + '?file=' + _file + '&position=' + _keyFrames.filepositions[0] + '&bandwidth=mid');			}			else {				if (_player.isRTMP) {					trace('  - STREAMING SCRUBBING');					// set STREAMING scrubbing functions					//					if (_control.seek) {						_control.seek.bgr.mouseEnabled    = true;						_control.seek.bgr.buttonMode      = true;						_control.seek.btn.mouseEnabled    = true;						_control.seek.btn.buttonMode      = true;						_control.seek.loaded.mouseEnabled = false;						_control.seek.bgr.addEventListener(MouseEvent.MOUSE_DOWN, bgrDownHandler);						_control.seek.btn.addEventListener(MouseEvent.MOUSE_DOWN, bgrDownHandler);					}				}				else {					trace('  - PROGRESSIVE SCRUBBING');					// set PROGRESSIVE scrubbing functions					//					if (_control.seek) {						_control.seek.loaded.mouseEnabled = true;						_control.seek.loaded.buttonMode   = true;						_control.seek.btn.mouseEnabled    = true;						_control.seek.btn.buttonMode      = true;						_control.seek.bgr.mouseEnabled    = false;						_control.seek.loaded.addEventListener(MouseEvent.MOUSE_DOWN, loadDownHandler);						_control.seek.btn.addEventListener(MouseEvent.MOUSE_DOWN,  loadDownHandler);					}				}			}			// send event, that we have duration			//			dispatchEvent(new Event(VIDEO_METADATA));		}		private function playheadUpdateHandler(event:VideoEvent):void {			// TIME CALCULATION			var num:Number;			var min_num:Number;			var sec_num:Number;			var my_minutes:String;			var my_seconds:String;			var timeStr:String;			num        = event.playheadTime as Number;			min_num    = Math.floor(num/60);			sec_num    = Math.floor(num%60);			my_minutes = (min_num<10) ? ('0'+min_num.toString()) : (min_num.toString());			my_seconds = (sec_num<10) ? ('0'+sec_num.toString()) : (sec_num.toString());			timeStr    = '[ ' + my_minutes + ':' + my_seconds + ' | ';			if (_totalTimeString == '0') {				timeStr    += 'xx:xx';			}			else {				timeStr    += _totalTimeString;				// PLAYHEAD POSITION CALCULATION				if (_control.seek) {					_control.seek.btn.x = ( _control.seek.bgr.x - (_control.seek.btn.width/2) ) + (event.playheadTime/_totalTime)*_control.seek.bgr.width;					_control.seek.pos.width = _control.seek.btn.x - _control.seek.bgr.x + _control.seek.btn.width/2;				}			}			timeStr += ' ]';			if (_control.time_txt)				_control.time_txt.htmlText = timeStr;		}		private function stateChangeHandler(event:VideoEvent):void {			switch (event.state) {				case VideoState.BUFFERING:					//trace('\n- BUFFERING');					if (_control.playPause) {						_control.playPause.playBtn.visible  = false;						_control.playPause.pauseBtn.visible = true;					}					_control.mouseChildren = true;					_fader.alpha           = 1;					if (_myPlay)						_myPlay.alpha      = 0;					dispatchEvent(new Event(VIDEO_BUFFERING));					break;				case VideoState.CONNECTION_ERROR:					//trace('\n- CONNECTION_ERROR');					if (_control.playPause) {						_control.playPause.playBtn.visible  = false;						_control.playPause.pauseBtn.visible = true;					}					_control.mouseChildren = false;					_fader.alpha           = 1;					if (_myPlay)						_myPlay.alpha      = 0;					dispatchEvent(new Event(VIDEO_ERROR));					break;				case VideoState.DISCONNECTED:					if (_player.activeVideoPlayerIndex == 1) {						//trace('\n- DISCONNECTED');						if (_control.playPause) {							_control.playPause.playBtn.visible  = false;							_control.playPause.pauseBtn.visible = true;						}						_control.mouseChildren = false;						_fader.alpha           = 1;						if (_myPlay)							_myPlay.alpha      = 0;						dispatchEvent(new Event(VIDEO_ERROR));					}					break;				case VideoState.LOADING:					//trace('\n- LOADING');					if (_control.playPause) {						_control.playPause.playBtn.visible  = false;						_control.playPause.pauseBtn.visible = true;					}					_control.mouseChildren = true;					_fader.alpha           = 1;					if (_myPlay)						_myPlay.alpha      = 0;					break;				case VideoState.PAUSED:					//trace('\n- PAUSED');					if (_control.playPause) {						_control.playPause.playBtn.visible  = true;						_control.playPause.pauseBtn.visible = false;					}					_control.mouseChildren  = true;					_fader.alpha            = 1;					if (_myPlay)						_myPlay.alpha       = 1;					dispatchEvent(new Event(VIDEO_PAUSED));					break;				case VideoState.PLAYING:					//trace('\n- PLAYING');					if (_control.playPause) {						_control.playPause.playBtn.visible  = false;						_control.playPause.pauseBtn.visible = true;					}					_control.mouseChildren = true;					_fader.alpha    = 0;					if (_myPlay)						_myPlay.alpha   = 0;					if (_myBuffer)						_myBuffer.alpha = 0;					dispatchEvent(new Event(VIDEO_PLAYING));					break;				case VideoState.RESIZING:					//					break;				case VideoState.REWINDING:					//					break;				case VideoState.SEEKING:					//trace('\n- SEEKING');					_fader.alpha        = 1;					if (_myPlay)						_myPlay.alpha   = 0;					if (_myBuffer)						_myBuffer.alpha = 0;					dispatchEvent(new Event(VIDEO_SEEKING)); 					break;				case VideoState.STOPPED:					//trace('\n- STOPPED');					// occures only at video's end and					// at start when playheadtime is 0					if (_control.playPause) {						_control.playPause.playBtn.visible  = true;						_control.playPause.pauseBtn.visible = false;					}					_control.mouseChildren = true;					_fader.alpha        = 1;					_fader.mouseEnabled = true;					if (_myPlay)						_myPlay.alpha   = 1;					if(_myBuffer)						_myBuffer.alpha = 0;					if (_player.playheadTime != 0) {						dispatchEvent(new Event(VIDEO_END));					}					break;			}		}		//----------------------------------------------------------------------------------------------------------------------------		// SET - GET		public function setSize(outerWidth:Number, outerHeight:Number):void {			outerWidth  = ((outerWidth  < MIN_SCALE_WIDTH)  ? (MIN_SCALE_WIDTH)  : (outerWidth));			outerHeight = ((outerHeight < MIN_SCALE_HEIGHT) ? (MIN_SCALE_HEIGHT) : (outerHeight));			// player bgr			//			with (_playerBgr.graphics) {				clear();				beginFill(PLAYER_BGR_COLOR);				drawRect(0, 0, outerWidth, outerHeight);				endFill();			}			// player			//			_player.setSize(outerWidth, outerHeight);			// fader			//			with (_fader.graphics) {				clear();				lineStyle(0,0,0);				beginFill(0, FADER_ALPHA);				drawRect(0, 0, outerWidth, outerHeight);				endFill();			}			if (_myPlay) {				_myPlay.x = (_fader.width  - _myPlay.width)  /2;				_myPlay.y = (_fader.height - _myPlay.height) /7 *3;			}			if (_myBuffer) {				_myBuffer.x = (_fader.width  - _myBuffer.width)  /2;				_myBuffer.y = _myPlay.y + _myPlay.height +10;			}			// logo			//			if (_logo) {				switch (LOGO_PLACE) {						case LOGO_TOP_LEFT:							_logo.x = LOGO_GAP;						_logo.y = LOGO_GAP;						break;						case LOGO_TOP_RIGHT:							_logo.x = outerWidth - LOGO_GAP;						_logo.y = LOGO_GAP;						break;						case LOGO_BOTTOM_LEFT:							_logo.x = LOGO_GAP;						_logo.y = outerHeight - LOGO_GAP;						break;						case LOGO_BOTTOM_RIGHT:							_logo.x = outerWidth -  LOGO_GAP;						_logo.y = outerHeight - LOGO_GAP;						break;				}			}		}		public function replay():void {			if (_metadataKeyframes && _phpFlvProvider) {				_player.load(_phpFlvProvider + '?file=' + _file + '&position=' + _keyFrames.filepositions[0] + '&bandwidth=mid');			}			else {				_player.seek(0);			}			_player.play();		}		public function faderClick():void {			_fader.dispatchEvent(new MouseEvent(MouseEvent.CLICK));		}		public function get player():FLVPlayback {			return(_player);		}		public function get duration():Number {			return(_totalTime);		}		public function set faderButtonMode(bool:Boolean):void {			_fader.buttonMode = bool;		}		public function get faderButtonMode():Boolean {			return _fader.buttonMode;		}		public function set faderPlayPause(bool:Boolean):void {			_playPauseEnabled = bool;		}		public function get faderPlayPause():Boolean {			return _playPauseEnabled;		}		public function set customInvocation(func:Function):void {			_customInvocation = func;		}		public function get customInvocation():Function {			return _customInvocation;		}		public function clearCustomInvocation():void {			_customInvocation = null;		}		public function set title(str:String):void {			_title = str;			if (_control.title)				_control.title.title_txt.htmlText = str;		}		public function get title():String {			return _title;		}		public function set flvProvider(prov:String):void {			_phpFlvProvider = prov;		}		public function get flvProvider():String {			return _phpFlvProvider;		}	}}